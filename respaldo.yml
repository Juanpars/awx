---
- name: Backup de configuración de routers MikroTik
  hosts: all
  gather_facts: no

  vars:
    backup_dir: "/backups/mikrotik"
    backup_format: "backup"  # Puede ser "backup" o "export"

  tasks:
    - name: Crear directorio de backups si no existe
      ansible.builtin.file:
        path: "{{ backup_dir }}"
        state: directory
        mode: '0755'
      when: inventory_hostname == play_hosts[0]
      delegate_to: localhost

    - name: Obtener fecha y hora para el nombre del archivo
      ansible.builtin.set_fact:
        backup_timestamp: "{{ ansible_date_time.iso8601_basic_short }}"

    - name: Generar nombre del archivo de backup
      ansible.builtin.set_fact:
        backup_filename: "{{ backup_dir }}/{{ inventory_hostname }}_{{ backup_timestamp }}.{{ backup_format }}.rsc"

    - name: Ejecutar comando de backup/export
      ansible.netcommon.cli_command:
        command: >
          /export file={{ inventory_hostname }}_{{ backup_timestamp }}
          show-sensitive
      when: backup_format == "export"

    - name: Ejecutar comando de backup (formato binario)
      ansible.netcommon.cli_command:
        command: >
          /system backup save name={{ inventory_hostname }}_{{ backup_timestamp }}.backup
      when: backup_format == "backup"

    - name: Esperar a que se genere el archivo en el router
      ansible.builtin.pause:
        seconds: 5

    - name: Descargar archivo de exportación
      community.routeros.routeros_download:
        src: "{{ inventory_hostname }}_{{ backup_timestamp }}.rsc"
        dest: "{{ backup_filename }}"
        host: "{{ inventory_hostname }}"
        username: "{{ ansible_user }}"
        password: "{{ ansible_password }}"
      when: backup_format == "export"

    - name: Descargar archivo de backup (binario)
      community.routeros.routeros_download:
        src: "{{ inventory_hostname }}_{{ backup_timestamp }}.backup"
        dest: "{{ backup_filename }}"
        host: "{{ inventory_hostname }}"
        username: "{{ ansible_user }}"
        password: "{{ ansible_password }}"
      when: backup_format == "backup"

    - name: Eliminar archivo temporal del router
      ansible.netcommon.cli_command:
        command: >
          /file remove [find name~"{{ inventory_hostname }}_{{ backup_timestamp }}"] 

    - name: Verificar archivo descargado
      ansible.builtin.stat:
        path: "{{ backup_filename }}"
      register: backup_file
      delegate_to: localhost

    - name: Mostrar ubicación del backup
      ansible.builtin.debug:
        msg: "Backup guardado en {{ backup_filename }}"
      when: backup_file.stat.exists
