---
- name: Backup de configuración de routers MikroTik (versión SCP)
  hosts: all
  gather_facts: no
  vars:
    backup_dir: "/backups/mikrotik"
    backup_format: "export"  # "backup" o "export"
    ansible_ssh_common_args: "-o StrictHostKeyChecking=no"

  tasks:
    - name: Crear directorio de backups si no existe
      ansible.builtin.file:
        path: "{{ backup_dir }}"
        state: directory
        mode: '0755'
      when: inventory_hostname == play_hosts[0]
      delegate_to: localhost

    - name: Obtener fecha y hora para el nombre del archivo
      ansible.builtin.set_fact:
        backup_timestamp: "{{ ansible_date_time.iso8601_basic_short }}"

    - name: Generar nombre del archivo de backup
      ansible.builtin.set_fact:
        backup_filename: "{{ backup_dir }}/{{ inventory_hostname }}_{{ backup_timestamp }}.{{ backup_format }}"
        remote_filename: "{{ inventory_hostname }}_{{ backup_timestamp }}.{{ backup_format }}"

    - name: Ejecutar comando de export
      ansible.netcommon.cli_command:
        command: >
          /export file={{ remote_filename.split('.')[0] }}
          show-sensitive
      when: backup_format == "export"

    - name: Ejecutar comando de backup (binario)
      ansible.netcommon.cli_command:
        command: >
          /system backup save name={{ remote_filename }}
      when: backup_format == "backup"

    - name: Esperar a que se genere el archivo
      ansible.builtin.pause:
        seconds: 10

    - name: Descargar archivo via SCP
      ansible.builtin.command: >
        scp {{ ansible_user }}@{{ inventory_hostname }}:/{{ remote_filename }} {{ backup_filename }}
      args:
        executable: /bin/bash
      register: scp_result
      ignore_errors: yes

    - name: Eliminar archivo temporal del router
      ansible.netcommon.cli_command:
        command: >
          /file remove [find name~"{{ remote_filename.split('.')[0] }}"] 

    - name: Verificar archivo descargado
      ansible.builtin.stat:
        path: "{{ backup_filename }}"
      register: backup_file
      delegate_to: localhost

    - name: Mostrar resultado
      ansible.builtin.debug:
        msg: "Backup guardado en {{ backup_filename }}"
      when: backup_file.stat.exists
